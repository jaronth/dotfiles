#  ---------------------------------------------------------------------------
#
#  Description:  This file holds all my SHELL aliases.
#                Content for ~/.aliases file.
#                On macOS and Linux.
#
#  Sections:
#  1.   Make Terminal Better (remapping defaults and adding functionality)
#  2.   File and Folder Management
#  3.   Searching
#  4.   Process Management
#  5.   Networking
#  6.   System Operations & Information
#  7.   Web Development
#  8.   Miscellaneous
#  9.   Reminders & Notes
#
#  ---------------------------------------------------------------------------

#   ---------------------------------------
#   1.  MAKE TERMINAL BETTER
#   ---------------------------------------

#   Determine if macOS
#   ------------------------------------------------------------
    if [[ -n ${IS_MACOS} ]]; then
        alias ll='ls -GlphAF'                       # Preferred 'ls' implementation macOS
        alias edit='subl -w'                        # edit:         Opens any file in Sublime Text
        alias f='open -a Finder ./'                 # f:            Opens current directory in MacOS Finder
        trash () { command mv ${@} ~/.Trash ; }     # trash:        Moves a file to the MacOS trash
        ql () { qlmanage -p ${*} >& /dev/null ; }   # ql:           Opens any file in MacOS Quicklook Preview
    else
        alias ll='ls -lphAF --color'                # Preferred 'ls' implementation Linux
        alias edit='vim'                            # edit:         Opens any file in VIM
    fi

#   Define universal alias/functions
#   ------------------------------------------------------------
    alias cp='cp -iv'                               # Preferred 'cp' implementation
    alias mv='mv -iv'                               # Preferred 'mv' implementation
    alias mkdir='mkdir -pv'                         # Preferred 'mkdir' implementation
    alias less='less -FSRXc'                        # Preferred 'less' implementation
    cd() { builtin cd ${@}; ll; }                   # Always list directory contents upon 'cd'
    mcd () { mkdir -p ${1} && cd ${1}; }            # mcd:          Makes new Dir and jumps inside

#   lr:   Full Recursive Directory Listing
#   ------------------------------------------------------------
    alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'

#   mans:   Search manpage given in argument '1' for term given in argument '2' (case insensitive)
#           displays paginated result with colored search terms and two lines surrounding each hit.
#           Example: mans mplayer codec
#   ------------------------------------------------------------
    mans () {
        man ${1} | grep -iC2 --color=always ${2} | less
    }


#   ---------------------------------------
#   2.  FILE AND FOLDER MANAGEMENT
#   ---------------------------------------

    zipf () { zip -r ${1}.zip ${1}; }               # zipf:         To create a ZIP archive of a folder
    alias numFiles='echo $(ls -1 | wc -l)'          # numFiles:     Count of non-hidden files in current dir
    alias make1mb='mkfile 1m ./1MB.dat'             # make1mb:      Creates a file of 1mb size (all zeros)
    alias make5mb='mkfile 5m ./5MB.dat'             # make5mb:      Creates a file of 5mb size (all zeros)
    alias make10mb='mkfile 10m ./10MB.dat'          # make10mb:     Creates a file of 10mb size (all zeros)

#   cdf:   'Cd's to frontmost window of MacOS Finder
#   ------------------------------------------------------------
    cdf () {
        currFolderPath=$( /usr/bin/osascript <<EOT
            tell application "Finder"
                try
            set currFolder to (folder of the front window as alias)
                on error
            set currFolder to (path to desktop folder as alias)
                end try
                POSIX path of currFolder
            end tell
EOT
        )
        echo "cd to \"$currFolderPath\""
        cd "$currFolderPath"
    }

#   extract:   Extract most know archives with one command
#   ------------------------------------------------------------
    extract () {
        if [[ -f ${1} ]] ; then
          case ${1} in
            *.tar.bz2)   tar xjf ${1}     ;;
            *.tar.gz)    tar xzf ${1}     ;;
            *.bz2)       bunzip2 ${1}     ;;
            *.rar)       unrar e ${1}     ;;
            *.gz)        gunzip ${1}      ;;
            *.tar)       tar xf ${1}      ;;
            *.tbz2)      tar xjf ${1}     ;;
            *.tgz)       tar xzf ${1}     ;;
            *.zip)       unzip ${1}       ;;
            *.Z)         uncompress ${1}  ;;
            *.7z)        7z x ${1}        ;;
            *)     echo "${1} cannot be extracted via extract()" ;;
             esac
         else
             echo "${1} is not a valid file"
         fi
    }


#   ---------------------------------------
#   3.  SEARCHING
#   ---------------------------------------

    alias qf="find . -name "                        # qf:           Quickly search for file
    ff () { /usr/bin/find . -name "$@" ; }          # ff:           Find file under the current directory
    ffs () { /usr/bin/find . -name "$@"'*' ; }      # ffs:          Find file whose name starts with a given string
    ffe () { /usr/bin/find . -name '*'"$@" ; }      # ffe:          Find file whose name ends with a given string


#   ---------------------------------------
#   4.  PROCESS MANAGEMENT
#   ---------------------------------------

#   myps:
#       List processes owned by my user:
#   ------------------------------------------------------------
    myps() { ps ${@} -u ${USER} -o pid,%cpu,%mem,start,time,bsdtime,command ; }


#   ---------------------------------------
#   5.  NETWORKING
#   ---------------------------------------

    alias myip='curl http://checkip.amazonaws.com'  # myip:         Public facing IP Address

#   ii:   Display useful host related informaton
#   ------------------------------------------------------------
    ii() {
        echo -e "\nYou are logged on ${RED}$HOST"
        echo -e "\nAdditionnal information:$NC " ; uname -a
        echo -e "\n${RED}Users logged on:$NC " ; w -h
        echo -e "\n${RED}Current date :$NC " ; date
        echo -e "\n${RED}Machine stats :$NC " ; uptime
        echo -e "\n${RED}Current network location :$NC " ; scselect
        echo -e "\n${RED}Public facing IP Address :$NC " ; myip
        #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
        echo
    }


#   ---------------------------------------
#   6.  SYSTEMS OPERATIONS & INFORMATION
#   ---------------------------------------

#   cleanupDS:   Recursively delete .DS_Store files
#   ------------------------------------------------------------
    alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"


#   ---------------------------------------
#   7.  WEB DEVELOPMENT
#   ---------------------------------------

#   httpDebug:   Download a web page and show info on what took time
#   ------------------------------------------------------------
    httpDebug () { /usr/bin/curl ${@} -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }


#   ---------------------------------------
#   8.  MISCELLANEOUS
#   ---------------------------------------

#   dsin:   Count days since date "YYYY-MM-DD"
#   ------------------------------------------------------------
    dsin() {
        if [[ -n ${1} ]] && [[ $(date -j -f %Y-%m-%d ${1} 2> /dev/null) ]]; then
            now=$(date +%s)
            past=$(date -j -f %Y-%m-%d ${1} +%s)
            difference=$(($now-$past))
            echo $(($difference/(3600*24)))
         else
            echo "${1} is not a valid date format (YYYY-MM-DD)"
         fi
    }

#   toggle:   Toggle between opening and closing an application.
#   ------------------------------------------------------------
    toggle() {
        if $(osascript -e "application ${1} is running"); then
            echo "${1} will quit"
            osascript -e "tell application ${1} to quit"
        else
            echo "${1} will launch"
            osascript -e "tell application ${1} to launch"
        fi
    }

#   flatten:   Flatten the history of a Git repository safely.
#   ------------------------------------------------------------
    flatten() {
        GIT_BRANCH=$(git branch --show-current)
        git checkout --orphan future-${GIT_BRANCH}
        git add -A                                  # Add all files and commit them
        git commit -S -m "${J}"
        git branch -D ${GIT_BRANCH}                 # Deletes the original branch
        git branch -M ${GIT_BRANCH}                 # Rename the current branch
        git push -f origin ${GIT_BRANCH}            # Force push branch to GitHub
        git gc --aggressive --prune=all             # Remove the old files
    }


#   ---------------------------------------
#   9.  REMINDERS & NOTES
#   ---------------------------------------

#   J:   Print "{ ùöì }"
#   ------------------------------------------------------------
    J="{ ùöì }"
